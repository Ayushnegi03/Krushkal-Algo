#Python program for krushkal
# Kruskal's algorithm in Python
class Graphs:
    def __init__(self, vertice):
        self.V = vertice
        self.graph = []
    def add_edge(self,a,b,c):
        self.graph.append([a,b,c])
    # Search function
    def find(self,Parent, i):
        if Parent[i] == i:
            return i
        return self.find(Parent, Parent[i])
    def apply_union(self, Parent, rank, x, y):
        xroot = self.find(Parent, x)
        yroot = self.find(Parent, y)
        if rank[xroot] < rank[yroot]:
            Parent[xroot] = yroot
        elif rank[xroot] > rank[yroot]:
            Parent[yroot] = xroot
        else:
            Parent[yroot] = xroot
            rank[xroot] += 1

    #  Applying Kruskal algorithm
    def kruskal_algo(self):
        result = []
        i, e = 0, 0
        self.graph = sorted(self.graph, key=lambda item: item[2])
        Parent = []
        rank = []
        for node in range(self.V):
            Parent.append(node)
            rank.append(0)
        while e < self.V - 1:
            a,b,c = self.graph[i]
            i = i + 1
            x = self.find(Parent, a)
            y = self.find(Parent, b)
            if x != y:
                e = e + 1
                result.append([a,b,c])
                self.apply_union(Parent, rank, x, y)
        print("Here is Kruskal Algorithrm:")        
        for a, b, weight in result:
            print("%d - %d: %d" % (a,b, weight))
g = Graphs(5)
g.add_edge(0, 1, 8)
g.add_edge(0, 2, 5)
g.add_edge(1, 2, 9)
g.add_edge(1, 3, 11)
g.add_edge(2, 3, 15)
g.add_edge(2, 4, 10)
g.add_edge(3, 4, 7)
g.kruskal_algo() 
#Output:
#Here is Kruskal Algorithrm:
#0 - 2: 5
#3 - 4: 7
#0 - 1: 8
#2 - 4: 10
