//Kruskal's Algorithem
//Kruskalâ€™s algorithm is an algorithm that is used to find out the minimum spanning tree for a connected weighted graph.
//It follows a greedy approach that helps to finds an optimum solution at every stage.

#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
const int MAX = 1e6-1;
int ROOT[MAX];
const int nodes = 4, edges = 5;
pair <long long, pair<int, int> > p[MAX];
int Parent(int a)                                                       
{
    while(ROOT[a] != a)
    {
        ROOT[a] = ROOT[ROOT[a]];
        a = ROOT[a];
    }
    return a;
}
void union_find(int a, int b)                                       
{
    int d = Parent(a);
    int e = Parent(b);
    ROOT[d] = ROOT[e];
}
long long kruskal()
{
    int a, b;
    long long COST, MinCost = 0;
    for(int i = 0 ; i < edges ; ++i)
    {
        a = p[i].second.first;
        b = p[i].second.second;
        COST = p[i].first;
        if(Parent(a) != Parent(b))                                  
        {
            MinCost += COST;
            union_find(a, b);
        }
    }
    return MinCost;
}
int main()
{
    int x, y;
    long long weight, COST, MinCost;
    for(int i = 0;i < MAX;++i)                                      
    {
        ROOT[i] = i;
    }
    p[0] = make_pair(10, make_pair(0, 1));
    p[1] = make_pair(18, make_pair(1, 2));
    p[2] = make_pair(13, make_pair(2, 3));
    p[3] = make_pair(21, make_pair(0, 2));
    p[4] = make_pair(22, make_pair(1, 3));
    p[5] = make_pair(26, make_pair(1, 3));
    sort(p, p + edges);                                             
    MinCost = kruskal();
    cout << "Minimum cost is:"<< MinCost << endl;
    return 0;
}
//Output-
//MAximum cost is :41
